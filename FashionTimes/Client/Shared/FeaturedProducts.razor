@inject IProductService ProductService
@implements IDisposable

<center><h2>Top Products</h2></center>
@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <div class="container">
       <div class="row">
        @foreach (var product in ProductService.Products)
        {
            <div class="col-md-3">
            @if (product.Featured)
            {
            
                <div class="featured-product">
                    <div class="prudt-img">
                        <a href="product/@product.Id">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl">
                            }
                         @*    else if(product.Images.Count > 0)
                            {
                                <img src="@product.Images[0].Data" />
                            } *@
                        </a>
                    </div>
                    <h6><a href="product/@product.Id">@product.Title</a></h6>
                    @if (product.Variants != null && product.Variants.Count > 0)
                    {
                        <h5 class="price">
                            ₹ @product.Variants[0].Price
                        </h5>
                    }
                </div>
           
            }
            </div>
        }
       </div>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
}
